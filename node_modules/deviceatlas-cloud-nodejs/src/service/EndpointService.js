"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointService = void 0;
var Endpoint_1 = require("../Endpoint");
var ClientException_1 = require("../ClientException");
/**
 * Service that ranks the Cloud Service endpoints
 * by connection speed. Any endpoint that fails
 * to connect is placed at the bottom of the list.
 */
var EndpointService = /** @class */ (function () {
    function EndpointService(config, cacheService, httpService) {
        this.config = config;
        this.cacheService = cacheService;
        this.httpService = httpService;
    }
    EndpointService.prototype.getRankedEndpoints = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rankedEndpoints, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.parseEndpointsJson;
                        return [4 /*yield*/, this.cacheService.get(EndpointService.CACHE_KEY)];
                    case 1:
                        rankedEndpoints = _a.apply(this, [_b.sent()]);
                        if (!!rankedEndpoints) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.rankEndpoints()];
                    case 2:
                        rankedEndpoints = _b.sent();
                        return [4 /*yield*/, this.cacheService.put(EndpointService.CACHE_KEY, rankedEndpoints)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, rankedEndpoints];
                }
            });
        });
    };
    EndpointService.prototype.parseEndpointsJson = function (endpointsJson) {
        if (endpointsJson) {
            return endpointsJson.map(function (obj) { return new Endpoint_1.Endpoint(obj._endpoint); });
        }
        return null;
    };
    EndpointService.prototype.rankEndpoints = function () {
        return __awaiter(this, void 0, void 0, function () {
            var results, _a, _b, endpoint, connectionSpeed, e_1_1, error_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 9, , 10]);
                        results = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(this.getEndpoints()), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        endpoint = _b.value;
                        return [4 /*yield*/, this.getConnectionSpeed(endpoint.getPropertiesUrl(this.config.licenceKey, {}))];
                    case 3:
                        connectionSpeed = _d.sent();
                        results.push({ endpoint: endpoint, connectionSpeed: connectionSpeed });
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        results.sort(function (a, b) { return a.connectionSpeed - b.connectionSpeed; });
                        return [2 /*return*/, results.map(function (result) { return result.endpoint; })];
                    case 9:
                        error_1 = _d.sent();
                        throw error_1;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    EndpointService.prototype.getConnectionSpeed = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var startTime, httpResponse_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        startTime = Date.now();
                        return [4 /*yield*/, this.httpService.sendRequest(url)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, Date.now() - startTime];
                    case 2:
                        httpResponse_1 = _a.sent();
                        if (httpResponse_1.shouldRetry()) {
                            // An unknown error occurred,
                            // consider this endpoint slow
                            // and move on to the next
                            return [2 /*return*/, EndpointService.SLOW_ENDPOINT];
                        }
                        else {
                            return [2 /*return*/, Promise.reject(new ClientException_1.ClientException(httpResponse_1.body))];
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    EndpointService.prototype.getEndpoints = function () {
        return [
            new Endpoint_1.Endpoint("http://region0.deviceatlascloud.com"),
            new Endpoint_1.Endpoint("http://region1.deviceatlascloud.com"),
            new Endpoint_1.Endpoint("http://region2.deviceatlascloud.com"),
            new Endpoint_1.Endpoint("http://region3.deviceatlascloud.com")
        ];
    };
    EndpointService.CACHE_KEY = "ranked_endpoints";
    EndpointService.SLOW_ENDPOINT = Number.MAX_SAFE_INTEGER;
    return EndpointService;
}());
exports.EndpointService = EndpointService;
