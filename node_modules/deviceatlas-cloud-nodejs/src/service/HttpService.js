"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpService = void 0;
var http = require("http");
var HttpResponse_1 = require("../HttpResponse");
/**
 * Service to make HTTP calls to the Cloud Service
 * endpoints.
 */
var HttpService = /** @class */ (function () {
    function HttpService(config, clientVersion) {
        this.config = config;
        this.clientVersion = clientVersion;
    }
    HttpService.prototype.sendRequest = function (url, headers) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        return new Promise(function (resolve, reject) {
            headers[HttpService.USER_AGENT_HEADER] = _this.getClientUserAgent();
            var options = {
                method: 'GET',
                timeout: _this.config.timeoutSeconds,
                headers: __assign({}, headers),
            };
            var request = http.request(url, options, function (response) {
                var chunks = [];
                response.on('data', function (chunk) {
                    chunks.push(chunk);
                });
                response.on('end', function () {
                    var responseBody = Buffer.concat(chunks).toString();
                    var httpResponse = new HttpResponse_1.HttpResponse(responseBody, response.statusCode);
                    if (httpResponse.validResponse()) {
                        resolve(httpResponse);
                    }
                    else {
                        reject(httpResponse);
                    }
                });
            });
            request.on('error', function (error) {
                reject(new HttpResponse_1.HttpResponse(error.message, 0));
            });
            request.end();
        });
    };
    HttpService.prototype.getClientUserAgent = function () {
        return "DeviceAtlas Cloud API/".concat(this.clientVersion, " NodeJS/").concat(process.version);
    };
    HttpService.USER_AGENT_HEADER = 'user-agent';
    return HttpService;
}());
exports.HttpService = HttpService;
