"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
var os = require("os");
/**
 * DeviceAtlas Cloud API configuration. An instance of this
 * class must be created with the licence key and passed into
 * the `Client` instance. This class provides setter methods
 * to change the default client behaviour.
 *
 * @package DeviceAtlas\Device
 * @author DeviceAtlas Limited
 * @copyright COPYRIGHT_PLACEHOLDER
 *
 * @class Config
 * @constructor
 * @param {string} licenceKey
 */
var Config = /** @class */ (function () {
    function Config(licenceKey) {
        this._licenceKey = licenceKey;
        this._useCache = true;
        this._useFileCache = true;
        this._cacheDirectory = os.tmpdir() + "/deviceatlas_cache";
        this._cacheExpirySeconds = 2592000; // 30 days
        this._timeoutSeconds = 2;
        this._cookieName = 'DAPROPS';
    }
    Object.defineProperty(Config.prototype, "licenceKey", {
        /**
         * Returns a licence key which was used to initialize the `Config`.
         *
         * @method licenceKey
         * @type string
         */
        get: function () {
            return this._licenceKey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "useCache", {
        /**
         * Returns `true` if the in-memory cache is used.
         *
         * @method useCache
         * @type boolean
         */
        get: function () {
            return this._useCache;
        },
        /**
         * Turns on/off the in-memory cache.
         *
         * The in-memory cache is enabled by default.
         *
         * @method useCache
         * @param {boolean} useCache
         * @type boolean
         */
        set: function (useCache) {
            this._useCache = useCache;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "useFileCache", {
        /**
         * Returns `true` if the file cache is used.
         *
         * @method useFileCache
         * @type boolean
         */
        get: function () {
            return this._useFileCache;
        },
        /**
         * Turns on/off the file cache.
         *
         * The file cache is enabled by default.
         *
         * @method useFileCache
         * @param {boolean} useFileCache
         */
        set: function (useFileCache) {
            this._useFileCache = useFileCache;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "cacheDirectory", {
        /**
         * A directory used by the file cache.
         *
         * @method cacheDirectory
         */
        get: function () {
            return this._cacheDirectory;
        },
        /**
         * Sets a directory for the file cache.
         *
         * The default directory is the system's temporary directory.
         *
         * @method cacheDirectory
         * @param {string} cacheDirectory
         */
        set: function (cacheDirectory) {
            this._cacheDirectory = cacheDirectory;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "cacheExpirySeconds", {
        /**
         * Returns the time (in seconds) that items remain cached for.
         *
         * @method cacheExpirySeconds
         * @return {number}
         */
        get: function () {
            return this._cacheExpirySeconds;
        },
        /**
         * Sets the time (in seconds) that items remain cached for.
         *
         * The default cache expiry is 30 days (2592000 seconds).
         *
         * @method cacheExpirySeconds
         * @param {number} cacheExpirySeconds
         */
        set: function (cacheExpirySeconds) {
            this._cacheExpirySeconds = cacheExpirySeconds;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "timeoutSeconds", {
        /**
         * Returns the timeout in seconds allowed for the Cloud API connections.
         *
         * @method timeoutSeconds
         * @return {number}
         */
        get: function () {
            return this._timeoutSeconds;
        },
        /**
         * Sets the timeout (in seconds) to allow to obtain the device properties
         * from the Cloud API endpoint.
         *
         * The default timeout is 2 seconds.
         *
         * @method timeoutSeconds
         * @param {number} timeoutSeconds
         */
        set: function (timeoutSeconds) {
            this._timeoutSeconds = timeoutSeconds;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "cookieName", {
        /**
         * Returns the name of the cookie where the client-side properties are located.
         *
         * @method cookieName
         * @return {string}
         */
        get: function () {
            return this._cookieName;
        },
        /**
         * Sets the name of the cookie where the client-side properties are located.
         * The default cookie name is `DAPROPS`.
         *
         * For additional information, please see the Client-side Component documentation at:
         *
         * https://docs.deviceatlas.com/apis/clientside/latest/README.ClientSide.html.
         *
         * @method cookieName
         * @param {string} cookieName
         */
        set: function (cookieName) {
            this._cookieName = cookieName;
        },
        enumerable: false,
        configurable: true
    });
    return Config;
}());
exports.Config = Config;
