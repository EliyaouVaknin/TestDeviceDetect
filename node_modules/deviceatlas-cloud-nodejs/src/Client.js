"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var EndpointService_1 = require("./service/EndpointService");
var DetectionService_1 = require("./service/DetectionService");
var DetectionHeadersService_1 = require("./service/DetectionHeadersService");
var CacheService_1 = require("./service/CacheService");
var PropertiesCacheKeyService_1 = require("./service/PropertiesCacheKeyService");
var HttpService_1 = require("./service/HttpService");
var ClientCookieService_1 = require("./service/ClientCookieService");
var Util_1 = require("./Util");
var FileCache_1 = require("./cache/FileCache");
var MemoryCache_1 = require("./cache/MemoryCache");
/**
 * DeviceAtlas Cloud API.
 *
 * This client library can be used to easily get device data from the
 * DeviceAtlas Cloud service. To reduce cloud calls and improve performance
 * the API locally caches the data returned from the cloud service. This API
 * caches data in memory and on the disk.
 *
 * @package DeviceAtlas\Device
 * @author DeviceAtlas Limited
 * @copyright COPYRIGHT_PLACEHOLDER
 *
 * @class Client
 * @constructor
 * @param {Config} config -  An instance of DeviceAtlas Cloud API configuration
 */
var Client = /** @class */ (function () {
    function Client(config) {
        var cacheService = new CacheService_1.CacheService(config, new MemoryCache_1.MemoryCache(), new FileCache_1.FileCache(config.cacheDirectory));
        var httpService = new HttpService_1.HttpService(config, Client.API_VERSION);
        var endpointService = new EndpointService_1.EndpointService(config, cacheService, httpService);
        this.detectionHeadersService = new DetectionHeadersService_1.DetectionHeadersService(config, cacheService, endpointService, httpService);
        var propertiesCacheKeyService = new PropertiesCacheKeyService_1.PropertiesCacheKeyService(this.detectionHeadersService);
        this.detectionService = new DetectionService_1.DetectionService(config, cacheService, endpointService, propertiesCacheKeyService, httpService);
        this.clientCookieService = new ClientCookieService_1.ClientCookieService(config);
    }
    /**
     * Gets the device data for the provided headers and Client-side string from DeviceAtlas Cloud.
     *
     * Once data has been returned from DeviceAtlas Cloud it can be cached locally
     * to speed up subsequent requests. If device data provided by "DeviceAtlas
     * Client Side Component" exists in a cookie then cloud data will be merged
     * with the cookie data.
     *
     * If en error occurs during device identification the returned object will
     * contain an "error" key e.g.
     *
     * <pre>
     *     {"error": "Error message"}
     * </pre>
     *
     * @method getProperties
     * @param {Object.<string, string>} headers A set of HTTP headers
     * @param {string} [clientSideString] A client-side component string
     * @return {Promise<Object>} A promise that contains a list of detected properties.
     */
    Client.prototype.getProperties = function (headers, clientSideString) {
        if (clientSideString === void 0) { clientSideString = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var filteredHeaders;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = Util_1.Util.normaliseHeaders(headers);
                        return [4 /*yield*/, this.detectionHeadersService.filterHeaders(headers)];
                    case 1:
                        filteredHeaders = _a.sent();
                        return [2 /*return*/, this.detectionService.getProperties(filteredHeaders, clientSideString)];
                }
            });
        });
    };
    /**
     * Gets the device data for the provided request from DeviceAtlas Cloud.
     *
     * Once data has been returned from DeviceAtlas Cloud it can be cached locally
     * to speed up subsequent requests. If device data provided by "DeviceAtlas
     * Client Side Component" exists in a cookie then cloud data will be merged
     * with the cookie data.
     *
     * If en error occurs during device identification the returned object will
     * contain an "error" key e.g.
     *
     * <pre>
     *     {"error": "Error message"}
     * </pre>
     *
     * @method getPropertiesFromRequest
     * @param {request} request A request object
     * @return {Promise<Object>} A promise that contains a list of detected properties.
     */
    Client.prototype.getPropertiesFromRequest = function (request) {
        return this.getProperties(request.headers, this.clientCookieService.getCookie(request['headers']['cookie']));
    };
    /**
     * Gets the API version.
     *
     * @method getVersion
     * @return string
     */
    Client.getVersion = function () {
        return this.API_VERSION;
    };
    Client.API_VERSION = '2.0.1';
    return Client;
}());
exports.Client = Client;
