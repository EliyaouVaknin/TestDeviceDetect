"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCache = void 0;
var fs = require("fs");
var path = require("path");
var CacheEntry_1 = require("./CacheEntry");
var ClientException_1 = require("../ClientException");
var FileCache = /** @class */ (function () {
    function FileCache(cacheDirectory) {
        this.cacheDirectory = cacheDirectory;
    }
    FileCache.prototype.get = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var filePath, fileExists, content, entryJson, entry, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filePath = this.getFilePath(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, , 9]);
                        return [4 /*yield*/, this.fileExists(filePath)];
                    case 2:
                        fileExists = _a.sent();
                        if (!fileExists) return [3 /*break*/, 7];
                        return [4 /*yield*/, fs.promises.readFile(filePath, 'utf8')];
                    case 3:
                        content = _a.sent();
                        entryJson = JSON.parse(content);
                        entry = new CacheEntry_1.CacheEntry(entryJson.data, entryJson.expiry);
                        if (!!entry.isExpired()) return [3 /*break*/, 4];
                        return [2 /*return*/, entry.data];
                    case 4: return [4 /*yield*/, this.fileExists(filePath)];
                    case 5:
                        if (!_a.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, fs.promises.unlink(filePath)];
                    case 6:
                        _a.sent(); // Remove expired cache file
                        _a.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        error_1 = _a.sent();
                        throw new ClientException_1.ClientException("Could not get item from file cache " + error_1.message);
                    case 9: return [2 /*return*/, null];
                }
            });
        });
    };
    FileCache.prototype.put = function (key, value, expirySeconds) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, jsonEntry, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.createCacheDirectory()];
                    case 1:
                        _a.sent();
                        entry = CacheEntry_1.CacheEntry.getNewEntry(value, expirySeconds);
                        jsonEntry = JSON.stringify(entry);
                        return [4 /*yield*/, fs.promises.writeFile(this.getFilePath(key), jsonEntry, 'utf8')];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        throw new ClientException_1.ClientException("Could not put item into file cache " + error_2.message);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FileCache.prototype.createCacheDirectory = function () {
        return __awaiter(this, void 0, void 0, function () {
            var directoryExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fileExists(this.cacheDirectory)];
                    case 1:
                        directoryExists = _a.sent();
                        if (!!directoryExists) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs.promises.mkdir(this.cacheDirectory)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileCache.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            var directoryExists, files, files_1, files_1_1, file, filePath, e_1_1;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.fileExists(this.cacheDirectory)];
                    case 1:
                        directoryExists = _b.sent();
                        if (!directoryExists) return [3 /*break*/, 10];
                        return [4 /*yield*/, fs.promises.readdir(this.cacheDirectory)];
                    case 2:
                        files = _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 8, 9, 10]);
                        files_1 = __values(files), files_1_1 = files_1.next();
                        _b.label = 4;
                    case 4:
                        if (!!files_1_1.done) return [3 /*break*/, 7];
                        file = files_1_1.value;
                        filePath = path.join(this.cacheDirectory, "".concat(file));
                        return [4 /*yield*/, this.fileExists(filePath)];
                    case 5:
                        if (_b.sent()) {
                            fs.promises.unlink(filePath).catch(function (error) {
                                throw new ClientException_1.ClientException("Could not delete items from file cache " + error.message);
                            });
                        }
                        _b.label = 6;
                    case 6:
                        files_1_1 = files_1.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    FileCache.prototype.getFilePath = function (key) {
        return path.join(this.cacheDirectory, "".concat(key, ".json"));
    };
    FileCache.prototype.fileExists = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, fs.promises.access(filePath, fs.constants.F_OK).then(function () {
                        return true;
                    }).catch(function () {
                        return false;
                    })];
            });
        });
    };
    return FileCache;
}());
exports.FileCache = FileCache;
